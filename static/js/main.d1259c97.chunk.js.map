{"version":3,"sources":["store/todo/actions.ts","store/user/actions.ts","store/index.ts","store/user/selectors.ts","api/api.ts","store/todo/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","SET_STATUS","SET_QUERY","TODOS_BY_QUERY","loadTodos","todos","type","LOAD_USER","CLEAR_USER","initialState","status","query","user","store","createStore","state","action","queryLoverCase","toLowerCase","filter","todo","title","includes","getUserSelector","API_URL","getTodos","a","fetch","response","json","getUserById","userId","getTodosByStatus","getStatusSelector","getQuerySelector","getTodosSelector","TodoList","dispatch","useDispatch","useSelector","handleClick","userFromServer","loadTodosFromServer","todosFromServer","handleDelete","todoId","method","useEffect","className","id","placeholder","value","onChange","event","setQuery","target","getTodosByQuery","setStatus","map","classNames","TodoList__item","completed","checked","button","onClick","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1259c97.chunk.js","sourcesContent":["import { Todo } from '../../react-app-env';\n\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const SET_STATUS = 'SET_STATUS';\nexport const SET_QUERY = 'SET_QUERY';\nexport const TODOS_BY_QUERY = 'TODOS_BY_QUERY';\n\nexport const loadTodos = (todos: Todo[]) => ({ type: LOAD_TODOS, todos });\nexport const setStatus = (status: string) => ({\n  type: SET_STATUS, status,\n});\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY, query,\n});\nexport const getTodosByQuery = (query: string) => ({\n  type: TODOS_BY_QUERY, query,\n});\n","import { User } from '../../react-app-env';\n\nexport const LOAD_USER = 'LOAD_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\n\nexport const loadUser = (user: User) => ({\n  type: LOAD_USER, user,\n});\n\nexport const clearUser = () => ({ type: LOAD_USER });\n","import { createStore, AnyAction } from 'redux';\nimport { State, Todo } from '../react-app-env';\nimport {\n  LOAD_TODOS, SET_STATUS, SET_QUERY, TODOS_BY_QUERY,\n} from './todo/actions';\nimport { LOAD_USER, CLEAR_USER } from './user/actions';\n\nconst initialState: State = {\n  todos: [],\n  status: 'all',\n  query: '',\n  user: null,\n};\n\nconst reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_STATUS:\n      return { ...state, status: action.status };\n    case SET_QUERY:\n      return { ...state, query: action.query };\n    case LOAD_TODOS:\n      return { ...state, todos: [...action.todos] };\n    case LOAD_USER:\n      return { ...state, user: action.user };\n    case CLEAR_USER:\n      return { ...state, user: null };\n    case TODOS_BY_QUERY: {\n      const queryLoverCase = action.query.toLowerCase();\n      const todos = state.todos.filter((todo: Todo) => (\n        todo.title.toLowerCase().includes(queryLoverCase)));\n\n      return { ...state, todos: [...todos] };\n    }\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import { State } from '../../react-app-env';\n\nexport const getUserSelector = (state: State) => state.user;\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport async function getTodosByStatus(status: string): Promise<Todo[]> {\n  if (status === 'true' || status === 'false') {\n    const response = await fetch(`${API_URL}/todos?completed=${status}`);\n\n    return response.json();\n  }\n\n  return getTodos();\n}\n\nexport const remove = (todoId: number) => {\n  return fetch(`${API_URL}/todos/${todoId}`, { method: 'DELETE' });\n};\n","import { State } from '../../react-app-env';\n\nexport const getStatusSelector = (state: State) => state.status;\nexport const getQuerySelector = (state: State) => state.query;\nexport const getTodosSelector = (state: State) => state.todos;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect } from 'react';\nimport './TodoList.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodosByStatus, getUserById, remove } from '../../api/api';\n\nimport {\n  setStatus, setQuery, getTodosByQuery, loadTodos,\n} from '../../store/todo/actions';\n\nimport { loadUser } from '../../store/user/actions';\n\nimport {\n  getStatusSelector, getQuerySelector, getTodosSelector,\n} from '../../store/todo/selectors';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const status = useSelector(getStatusSelector);\n  const query = useSelector(getQuerySelector);\n  const todos = useSelector(getTodosSelector);\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setQuery(event.target.value));\n    dispatch(getTodosByQuery(event.target.value));\n  };\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(setStatus(event.target.value));\n  };\n\n  const handleClick = async (userId: number) => {\n    const userFromServer = await getUserById(userId);\n\n    dispatch(loadUser(userFromServer));\n  };\n\n  const loadTodosFromServer = async () => {\n    const todosFromServer = await getTodosByStatus(status);\n\n    dispatch(loadTodos(todosFromServer));\n  };\n\n  const handleDelete = async (userId: number) => {\n    await remove(userId);\n    await loadTodosFromServer();\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, [status]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <form className=\"ui form\">\n        <div className=\"two fields\">\n          <div className=\"field\">\n            <label>Type search word</label>\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              placeholder=\"Type search word\"\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n          <div className=\"field\">\n            <label>Choose status</label>\n            <select\n              className=\"ui fluid dropdown\"\n              value={status}\n              onChange={handleChangeStatus}\n            >\n              <option value=\"all\"> All </option>\n              <option value=\"false\"> Active </option>\n              <option value=\"true\"> Completed </option>\n            </select>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className={classNames({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={classNames({\n                    button: true,\n                    'TodoList__user-button': true,\n                    'TodoList__user-button--selected': todo.completed,\n                  })}\n                  type=\"button\"\n                  onClick={() => handleClick(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => handleDelete(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserSelector } from '../../store/user/selectors';\nimport { clearUser } from '../../store/user/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(clearUser());\n  };\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleClick}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport { getUserSelector } from './store/user/selectors';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {user ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}